{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x9f05f194D8B5C73e76A0Ec7BB7C1a02E42963251",
    "txHash": "0xcd2e7136bab5966555c7e219f44ea221df3e95ac6e87281c4616095dbffe245d"
  },
  "proxies": [
    {
      "address": "0x2e2bB10126782571c1452E05Ab2942005d5450aC",
      "txHash": "0xf8354dc278ad3edd879386f7f0000b1f673f5eb1389f3abffdf612e70bd1b631",
      "kind": "transparent"
    },
    {
      "address": "0x0d2a75bF7D89b97526af11B837E5CF1c31eDFfea",
      "txHash": "0xd6d0d50798b41078a5c18a2bcab46ba7e7dbf234d2127ec73de55c9deed37877",
      "kind": "transparent"
    },
    {
      "address": "0xa377D75126A3Ab8741B7f3afB4d4022cE9041e69",
      "txHash": "0xf4ec4581b3000aa230617a20d1943c2ff0135e45e97984489bad171376d37621",
      "kind": "transparent"
    },
    {
      "address": "0x955dB2ecDf50638cB7d714cE77F8Ca015D2d3Fb9",
      "txHash": "0x724e4edfd2e5e16d7a4b063b2091a646ba53c5aa77022eff331ed4e98d393127",
      "kind": "transparent"
    }
  ],
  "impls": {
    "7e990cf43407c0833d42890f016edd49e0c78fa26fbc2e6816fc2c6d109cdb29": {
      "address": "0xaa37F5C861312b25d7Def70188AD9D7c60E25998",
      "txHash": "0x2cc8e3429f45eba3cda0eefb75c26002fa29f5ebaa0209528ad305c8ea7fc50c",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "203",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "251",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "301",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:144"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "451",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "452",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "admin",
            "offset": 0,
            "slot": "501",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:47"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "502",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:49"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "503",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:52"
          },
          {
            "label": "customUri",
            "offset": 0,
            "slot": "504",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:53"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "505",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:55"
          },
          {
            "label": "symbol",
            "offset": 0,
            "slot": "506",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:57"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "507",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)21108_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:294"
          },
          {
            "label": "verifier",
            "offset": 0,
            "slot": "508",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:22"
          },
          {
            "label": "metaverseOwners",
            "offset": 0,
            "slot": "509",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:23"
          },
          {
            "label": "metaverseNftCollections",
            "offset": 0,
            "slot": "510",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:24"
          },
          {
            "label": "metaverseZones",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20538_storage))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:25"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "512",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:26"
          },
          {
            "label": "parameterControlAdd",
            "offset": 0,
            "slot": "513",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:31"
          },
          {
            "label": "sigDataUsed",
            "offset": 0,
            "slot": "514",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:224"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(uint256 => mapping(address => mapping(uint256 => bool)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20538_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct SharedStructsCrossChain.zone))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)21108_storage)": {
            "label": "mapping(uint256 => struct ERC1155TradableForRockCrossChain.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(zone)20538_storage)": {
            "label": "mapping(uint256 => struct SharedStructsCrossChain.zone)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)3588_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3287_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)21108_storage": {
            "label": "struct ERC1155TradableForRockCrossChain.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3287_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(zone)20538_storage": {
            "label": "struct SharedStructsCrossChain.zone",
            "members": [
              {
                "label": "zoneIndex",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "coreTeamAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "chainId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "collAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "typeZone",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "rockIndexFrom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "rockIndexTo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "b6407c704666a850b177535269876294acce81ebd85153f3659cf362af89dcc2": {
      "address": "0x0059958a5eA4729bDA1cE2f5E19F6F601da31Cd2",
      "txHash": "0x9bd8757d09117fd1bad13c4fbfe42fce3106e9143feb35ddd9ec0e525807e4ed",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "203",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "251",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "301",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:144"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "451",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "452",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "admin",
            "offset": 0,
            "slot": "501",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:47"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "502",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:49"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "503",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:52"
          },
          {
            "label": "customUri",
            "offset": 0,
            "slot": "504",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:53"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "505",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:55"
          },
          {
            "label": "symbol",
            "offset": 0,
            "slot": "506",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:57"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "507",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)21112_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:294"
          },
          {
            "label": "verifier",
            "offset": 0,
            "slot": "508",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:22"
          },
          {
            "label": "metaverseOwners",
            "offset": 0,
            "slot": "509",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:23"
          },
          {
            "label": "metaverseNftCollections",
            "offset": 0,
            "slot": "510",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:24"
          },
          {
            "label": "metaverseZones",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20540_storage))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:25"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "512",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:26"
          },
          {
            "label": "parameterControlAdd",
            "offset": 0,
            "slot": "513",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:31"
          },
          {
            "label": "sigDataUsed",
            "offset": 0,
            "slot": "514",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:224"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(uint256 => mapping(address => mapping(uint256 => bool)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20540_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct SharedStructsCrossChain.zone))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)21112_storage)": {
            "label": "mapping(uint256 => struct ERC1155TradableForRockCrossChain.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(zone)20540_storage)": {
            "label": "mapping(uint256 => struct SharedStructsCrossChain.zone)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)3588_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3287_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)21112_storage": {
            "label": "struct ERC1155TradableForRockCrossChain.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3287_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(zone)20540_storage": {
            "label": "struct SharedStructsCrossChain.zone",
            "members": [
              {
                "label": "zoneIndex",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "coreTeamAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "chainId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "collAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "typeZone",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "rockIndexFrom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "rockIndexTo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "07013d9c6d9af133d107a528bfee5065a5d0ece99d5b347961a13ea1cea706d7": {
      "address": "0x68240B9a178E759f03b78dF93EAFFcad7D3281B7",
      "txHash": "0xe89c53830115c2592644d36f3d4b1f783ec74304394ae9ad2d28bd602c192090",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "203",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "251",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "301",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:144"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "451",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "452",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "admin",
            "offset": 0,
            "slot": "501",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:47"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "502",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:49"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "503",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:52"
          },
          {
            "label": "customUri",
            "offset": 0,
            "slot": "504",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:53"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "505",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:55"
          },
          {
            "label": "symbol",
            "offset": 0,
            "slot": "506",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:57"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "507",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)21110_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:294"
          },
          {
            "label": "verifier",
            "offset": 0,
            "slot": "508",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:22"
          },
          {
            "label": "metaverseOwners",
            "offset": 0,
            "slot": "509",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:23"
          },
          {
            "label": "metaverseNftCollections",
            "offset": 0,
            "slot": "510",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:24"
          },
          {
            "label": "metaverseZones",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20540_storage))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:25"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "512",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:26"
          },
          {
            "label": "parameterControlAdd",
            "offset": 0,
            "slot": "513",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:31"
          },
          {
            "label": "sigDataUsed",
            "offset": 0,
            "slot": "514",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:224"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(uint256 => mapping(address => mapping(uint256 => bool)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20540_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct SharedStructsCrossChain.zone))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)21110_storage)": {
            "label": "mapping(uint256 => struct ERC1155TradableForRockCrossChain.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(zone)20540_storage)": {
            "label": "mapping(uint256 => struct SharedStructsCrossChain.zone)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)3588_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3287_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)21110_storage": {
            "label": "struct ERC1155TradableForRockCrossChain.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3287_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(zone)20540_storage": {
            "label": "struct SharedStructsCrossChain.zone",
            "members": [
              {
                "label": "zoneIndex",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "coreTeamAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "chainId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "collAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "typeZone",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "rockIndexFrom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "rockIndexTo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2795eb02005e957758f9fc8656636b6fefe4d0118718840c7901f4531b07ac0b": {
      "address": "0xD34c3944E73872D79213B63Da060A29F591F5c19",
      "txHash": "0x7ffe82cd28efb417f4caa3175895e267aba5e65daa88b79869623812a4531644",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "203",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "251",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "301",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:144"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "451",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "452",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "admin",
            "offset": 0,
            "slot": "501",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:47"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "502",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:49"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "503",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:52"
          },
          {
            "label": "customUri",
            "offset": 0,
            "slot": "504",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:53"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "505",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:55"
          },
          {
            "label": "symbol",
            "offset": 0,
            "slot": "506",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:57"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "507",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)21112_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:294"
          },
          {
            "label": "verifier",
            "offset": 0,
            "slot": "508",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:22"
          },
          {
            "label": "metaverseOwners",
            "offset": 0,
            "slot": "509",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:23"
          },
          {
            "label": "metaverseNftCollections",
            "offset": 0,
            "slot": "510",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:24"
          },
          {
            "label": "metaverseZones",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20540_storage))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:25"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "512",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:26"
          },
          {
            "label": "parameterControlAdd",
            "offset": 0,
            "slot": "513",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:31"
          },
          {
            "label": "sigDataUsed",
            "offset": 0,
            "slot": "514",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:224"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(uint256 => mapping(address => mapping(uint256 => bool)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20540_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct SharedStructsCrossChain.zone))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)21112_storage)": {
            "label": "mapping(uint256 => struct ERC1155TradableForRockCrossChain.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(zone)20540_storage)": {
            "label": "mapping(uint256 => struct SharedStructsCrossChain.zone)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)3588_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3287_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)21112_storage": {
            "label": "struct ERC1155TradableForRockCrossChain.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3287_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(zone)20540_storage": {
            "label": "struct SharedStructsCrossChain.zone",
            "members": [
              {
                "label": "zoneIndex",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "coreTeamAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "chainId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "collAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "typeZone",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "rockIndexFrom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "rockIndexTo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "cf11ab4590d4e1f481165432ed5bcc5ce0745680f341767133509b55e2a643ff": {
      "address": "0xDB88ABE8e05eE96dBd78C3a38eE1126C7EE724D8",
      "txHash": "0x38987271df415550eded3099e0a58152a0a4918b1c1148ff186b6e2fc82c2558",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "203",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "251",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "301",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:144"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "451",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "452",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "admin",
            "offset": 0,
            "slot": "501",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:47"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "502",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:49"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "503",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:52"
          },
          {
            "label": "customUri",
            "offset": 0,
            "slot": "504",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:53"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "505",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:55"
          },
          {
            "label": "symbol",
            "offset": 0,
            "slot": "506",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:57"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "507",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)21110_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:294"
          },
          {
            "label": "verifier",
            "offset": 0,
            "slot": "508",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:22"
          },
          {
            "label": "metaverseOwners",
            "offset": 0,
            "slot": "509",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:23"
          },
          {
            "label": "metaverseNftCollections",
            "offset": 0,
            "slot": "510",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:24"
          },
          {
            "label": "metaverseZones",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20540_storage))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:25"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "512",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:26"
          },
          {
            "label": "parameterControlAdd",
            "offset": 0,
            "slot": "513",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:31"
          },
          {
            "label": "sigDataUsed",
            "offset": 0,
            "slot": "514",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:224"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(uint256 => mapping(address => mapping(uint256 => bool)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20540_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct SharedStructsCrossChain.zone))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)21110_storage)": {
            "label": "mapping(uint256 => struct ERC1155TradableForRockCrossChain.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(zone)20540_storage)": {
            "label": "mapping(uint256 => struct SharedStructsCrossChain.zone)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)3588_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3287_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)21110_storage": {
            "label": "struct ERC1155TradableForRockCrossChain.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3287_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(zone)20540_storage": {
            "label": "struct SharedStructsCrossChain.zone",
            "members": [
              {
                "label": "zoneIndex",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "coreTeamAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "chainId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "collAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "typeZone",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "rockIndexFrom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "rockIndexTo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "0326611911f1687c9d052ccc585005c04990257040cf0a96d15de747a5928ead": {
      "address": "0x841F09d7A50B8CDDde668A6BDF4F8f450784221f",
      "txHash": "0xdc708656900fbef04c0fbbbf3885378fe414ee2b56ff06b5dc4a506d3636c4e1",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "203",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "251",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "301",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:144"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "451",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "452",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "admin",
            "offset": 0,
            "slot": "501",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:44"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "502",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:46"
          },
          {
            "label": "proxyRegistryAddress",
            "offset": 0,
            "slot": "503",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:48"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "504",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:49"
          },
          {
            "label": "customUri",
            "offset": 0,
            "slot": "505",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:50"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "506",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:52"
          },
          {
            "label": "symbol",
            "offset": 0,
            "slot": "507",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:54"
          },
          {
            "label": "verifier",
            "offset": 0,
            "slot": "508",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:22"
          },
          {
            "label": "metaverseOwners",
            "offset": 0,
            "slot": "509",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:23"
          },
          {
            "label": "metaverseNftCollections",
            "offset": 0,
            "slot": "510",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:24"
          },
          {
            "label": "metaverseZones",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20523_storage))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:25"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "512",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:26"
          },
          {
            "label": "parameterControlAdd",
            "offset": 0,
            "slot": "513",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:31"
          },
          {
            "label": "sigDataUsed",
            "offset": 0,
            "slot": "514",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:224"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(uint256 => mapping(address => mapping(uint256 => bool)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20523_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct SharedStructsCrossChain.zone))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(zone)20523_storage)": {
            "label": "mapping(uint256 => struct SharedStructsCrossChain.zone)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)3588_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3287_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)3287_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(zone)20523_storage": {
            "label": "struct SharedStructsCrossChain.zone",
            "members": [
              {
                "label": "zoneIndex",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "coreTeamAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "chainId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "collAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "typeZone",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "rockIndexFrom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "rockIndexTo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7351494aa0c8fcd9f84ebe8eca1fbc28d5ab9a910d57a0c837a26416943125d8": {
      "address": "0x1223a59bdD69F6940ffA5B1cF510238fa4D0282b",
      "txHash": "0xcdab720ba6dfb4cd68c6efa195392fd9dba63edd858f202a4167e87a55505b02",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "203",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "251",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "301",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:144"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "451",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "452",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "admin",
            "offset": 0,
            "slot": "501",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:44"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "502",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:46"
          },
          {
            "label": "proxyRegistryAddress",
            "offset": 0,
            "slot": "503",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:48"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "504",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:49"
          },
          {
            "label": "customUri",
            "offset": 0,
            "slot": "505",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:50"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "506",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:52"
          },
          {
            "label": "symbol",
            "offset": 0,
            "slot": "507",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:54"
          },
          {
            "label": "verifier",
            "offset": 0,
            "slot": "508",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:22"
          },
          {
            "label": "metaverseOwners",
            "offset": 0,
            "slot": "509",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:23"
          },
          {
            "label": "metaverseNftCollections",
            "offset": 0,
            "slot": "510",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:24"
          },
          {
            "label": "metaverseZones",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20537_storage))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:25"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "512",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:26"
          },
          {
            "label": "parameterControlAdd",
            "offset": 0,
            "slot": "513",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:31"
          },
          {
            "label": "sigDataUsed",
            "offset": 0,
            "slot": "514",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:224"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(uint256 => mapping(address => mapping(uint256 => bool)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20537_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct SharedStructsCrossChain.zone))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(zone)20537_storage)": {
            "label": "mapping(uint256 => struct SharedStructsCrossChain.zone)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)3588_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3287_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)3287_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(zone)20537_storage": {
            "label": "struct SharedStructsCrossChain.zone",
            "members": [
              {
                "label": "zoneIndex",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "coreTeamAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "chainId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "collAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "typeZone",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "rockIndexFrom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "rockIndexTo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "5a71646a05b03d1dd31f5b9e8170bf05025cd9a1ebe1a58a0e8d73818fdfeddf": {
      "address": "0x8AE6A488DA88A2a5e6A8dC5ff7F8E476A7Af5d20",
      "txHash": "0x5caeebabda3c290d177d6cb396e6f9575c5ead55513ad82dc055a1d103475d62",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:25"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "202",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:28"
          },
          {
            "label": "_uri",
            "offset": 0,
            "slot": "203",
            "type": "t_string_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC1155Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol:522"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "251",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol:52"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "301",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "302",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "351",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol:51"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC1155PresetMinterPauserUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol:144"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "451",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "452",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "admin",
            "offset": 0,
            "slot": "501",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:44"
          },
          {
            "label": "operator",
            "offset": 0,
            "slot": "502",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:46"
          },
          {
            "label": "proxyRegistryAddress",
            "offset": 0,
            "slot": "503",
            "type": "t_address",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:48"
          },
          {
            "label": "creators",
            "offset": 0,
            "slot": "504",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:49"
          },
          {
            "label": "customUri",
            "offset": 0,
            "slot": "505",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:50"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "506",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:52"
          },
          {
            "label": "symbol",
            "offset": 0,
            "slot": "507",
            "type": "t_string_storage",
            "contract": "ERC1155TradableForRockCrossChain",
            "src": "contracts/utils/ERC1155TradableForRockCrossChain.sol:54"
          },
          {
            "label": "verifier",
            "offset": 0,
            "slot": "508",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:22"
          },
          {
            "label": "parameterControlAdd",
            "offset": 0,
            "slot": "509",
            "type": "t_address",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:23"
          },
          {
            "label": "metaverseOwners",
            "offset": 0,
            "slot": "510",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:24"
          },
          {
            "label": "metaverseNftCollections",
            "offset": 0,
            "slot": "511",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:25"
          },
          {
            "label": "metaverseZones",
            "offset": 0,
            "slot": "512",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20901_storage))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:26"
          },
          {
            "label": "minted",
            "offset": 0,
            "slot": "513",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:27"
          },
          {
            "label": "sigDataUsed",
            "offset": 0,
            "slot": "514",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "RockNFTCollectionHolderCrossChain",
            "src": "contracts/goods/RockNFTCollectionHolderCrossChain.sol:28"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)3588_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(uint256 => mapping(address => mapping(uint256 => bool)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(zone)20901_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct SharedStructsCrossChain.zone))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(zone)20901_storage)": {
            "label": "mapping(uint256 => struct SharedStructsCrossChain.zone)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)3588_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3287_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)3287_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(zone)20901_storage": {
            "label": "struct SharedStructsCrossChain.zone",
            "members": [
              {
                "label": "zoneIndex",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "price",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "coreTeamAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "chainId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "collAddr",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "typeZone",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "rockIndexFrom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "rockIndexTo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
